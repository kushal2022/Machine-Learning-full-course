# -*- coding: utf-8 -*-
"""basic intro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zFWXRzYw2dJ_q7R74KSv8oU7I5yEbOs_

System Specifications.
"""

!cat /proc/cpuinfo

!cat /proc/meminfo

"""Installing Libraries"""

!pip install pandas

import pandas as pd

df = pd.read_csv('/content/sample_data/california_housing_test.csv')

df.head()

num1 = int(input('Enter first Num : '))
num2 = int(input('Enter first Num : '))

sum = num1 + num2
print(sum)

"""**Data types in Python**

1. Integer
2. Floating Point
3. Complex
4. Boolean
5. String
"""

s = "String"
print(s[1:5])

"""Special Data types:
1. List: square bracket [] and allows duplicate and multiple data types and changeable
2. Set : curly brackets {} and changeable and doesn't allow duplicate values
3. Dictionary : contains key, value pairs and doesn't allow duplicate keys
4. Tuple : small bracket () and unchangeable
"""

# prompt: give a list example in python

example_list = [1, 2, 3, 4, 5]
print(example_list)
type(example_list)

example_list.append(5)
print(example_list)

"""# NumPy - Numerical Python

  1. Allows several Mathematical Operations
  2. Faster Operations
"""

import numpy as np

from time import process_time

python_list = [i for i in range(10000)]
start_time = process_time()
result = [x**2 for x in python_list]
end_time = process_time()
print(end_time - start_time)

np_arrary = np.array([i for i in range(10000)])
start_time = process_time()
result = np_arrary**2
end_time = process_time()
print(end_time - start_time)

np_array = np.array([1, 2, 3, 4, 5])
print(np_array)

np_array.shape

x = np.array([[1, 2, 3], [4, 5, 6]])
print(x)

y = np.zeros((3, 2))
print(y)

z = np.ones((3, 2))
print(z)

a = np.full((2, 2), 7)
print(a)

b = np.eye(2)
print(b)

c = np.random.random((2, 2))
print(c)

d = np.random.randint(0, 9, (2, 2))
print(d)
#

e = np.linspace(0, 10, 5)
print(e)
#

f = np.arange(0, 10, 2)
print(f)

#convert a list to numpy array

list = [1, 2, 3, 4, 5]
arr = np.array(list)
print(arr)
type(arr)

"""Mathematical Operations in np_array"""

g = np.array([1, 2, 3, 4, 5])
h = np.array([6, 7, 8, 9, 10])
print(g + h)

"""# Pandas Data Frame

Pandas dataframe is two dimensional tabular data structure with labeled axes(rows and columns).
"""

import pandas as pd

"""#creating pandas data frame."""

from sklearn.datasets import load_iris

iris_dataset = load_iris()

type(iris_dataset)

print(iris_dataset)

#pandas data frame
df = pd.DataFrame(iris_dataset.data, columns= iris_dataset.feature_names)

print(df.head())

#importing the data from csv file to a pandas data frame
df_california = pd.read_csv('/content/sample_data/california_housing_test.csv')

df_california.head()

# prompt: Using dataframe df_california: generate confuse matrix

import pandas as pd
from sklearn.metrics import confusion_matrix

# Create a DataFrame of actual and predicted values
actual_values = [0, 1, 2, 2, 1]
predicted_values = [0, 2, 1, 1, 2]
df = pd.DataFrame({'actual': actual_values, 'predicted': predicted_values})

# Generate the confusion matrix
confusion_matrix = pd.crosstab(df['actual'], df['predicted'], rownames=['Actual'], colnames=['Predicted'])

# Print the confusion matrix
print(confusion_matrix)

#create random data set using random values
random_data = pd.DataFrame(np.random.rand(10, 5), columns=['A', 'B', 'C', 'D', 'E'])

random_data.head()

